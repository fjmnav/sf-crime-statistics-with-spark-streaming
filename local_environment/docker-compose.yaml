#
# This docker-compose file starts and runs:
# * A 1-node kafka cluster
# * A 1-zookeeper ensemble
# * Kafka REST Proxy
#
version: '3.7'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.2.2
    container_name: sf-police-zookeeper
    ports:
    - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: "2181"
    networks:
      - sf-police-network

  kafka-broker:
    image: confluentinc/cp-kafka:5.2.2
    container_name: sf-police-kafka-broker
    ports:
    - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka-broker:29092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
    depends_on:
    - "zookeeper"
    networks:
      - sf-police-network

  kafka-setup:
    image: confluentinc/cp-kafka:5.2.2
    container_name: sf-police-kafka-setup
    depends_on:
      - kafka-broker
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka-broker:29092 1 20 && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic com.udacity.sf-crime.police.calls'"
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    networks:
      - sf-police-network

  rest-proxy:
    image: confluentinc/cp-kafka-rest:5.2.2
    container_name: sf-police-rest-proxy
    ports:
    - "8881:8881"
    environment:
      KAFKA_REST_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka-broker:29092"
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8881/"
      KAFKA_REST_HOST_NAME: "rest-proxy"
    depends_on:
    - "kafka-broker"
    networks:
      - sf-police-network

  topics-ui:
    image: landoop/kafka-topics-ui:0.9.4
    container_name: sf-police-topics-ui
    ports:
    - "8885:8885"
    environment:
      PORT: "8885"
      PROXY: "true"
      KAFKA_REST_PROXY_URL: "http://rest-proxy:8881"
    depends_on:
    - "rest-proxy"
    networks:
      - sf-police-network

  spark-master:
    image: bde2020/spark-master:2.4.3-hadoop2.7
    container_name: sf-police-spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
      - "4040:4040"
    environment:
      - "INIT_DAEMON_STEP=setup_spark"
      - "constraint:node==<yourmasternode>"
      - "VIRTUAL_HOST=localhost"
      - "VIRTUAL_PORT=8081"
    volumes:
      - ./spark:/tmp/udacity/
    networks:
      - sf-police-network

  spark-worker-1:
    image: bde2020/spark-worker:2.4.3-hadoop2.7
    container_name: sf-police-spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - "INIT_DAEMON_STEP=setup_spark"
      - "SPARK_MASTER=spark://spark-master:7077"
      - "SPARK_WORKER_CORES=2"
      - "SPARK_WORKER_MEMORY=2g"
    networks:
      - sf-police-network

  spark-worker-2:
    image: bde2020/spark-worker:2.4.3-hadoop2.7
    container_name: sf-police-spark-worker-2
    depends_on:
      - spark-master
    ports:
      - "8082:8081"
    environment:
      - "INIT_DAEMON_STEP=setup_spark"
      - "SPARK_WORKER_CORES=2"
      - "SPARK_WORKER_MEMORY=2g"
    networks:
      - sf-police-network

networks:
  sf-police-network:
    driver: bridge
    name: sf-police-network

